!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
COUNTOF	DwWinSvc.c	66;"	d	file:
DWM_D_root_servers	DwMararc.h	38;"	d
DWM_D_upstream_servers	DwMararc.h	37;"	d
DWM_MAX_PATTERNS	DwMararc.h	194;"	d
DWM_MAX_STATES	DwMararc.h	192;"	d
DWM_N_deliver_all	DwMararc.h	62;"	d
DWM_N_dns_port	DwMararc.h	43;"	d
DWM_N_filter_rfc1918	DwMararc.h	63;"	d
DWM_N_handle_noreply	DwMararc.h	46;"	d
DWM_N_handle_overload	DwMararc.h	45;"	d
DWM_N_hash_magic_number	DwMararc.h	49;"	d
DWM_N_maradns_gid	DwMararc.h	52;"	d
DWM_N_maradns_uid	DwMararc.h	51;"	d
DWM_N_max_ar_chain	DwMararc.h	59;"	d
DWM_N_max_inflights	DwMararc.h	61;"	d
DWM_N_max_tcp_procs	DwMararc.h	56;"	d
DWM_N_max_ttl	DwMararc.h	70;"	d
DWM_N_maximum_cache_elements	DwMararc.h	50;"	d
DWM_N_maxprocs	DwMararc.h	41;"	d
DWM_N_min_ttl_incomplete_cname	DwMararc.h	69;"	d
DWM_N_ns_glueless_type	DwMararc.h	64;"	d
DWM_N_num_retries	DwMararc.h	54;"	d
DWM_N_recurse_min_bind_port	DwMararc.h	47;"	d
DWM_N_recurse_number_ports	DwMararc.h	48;"	d
DWM_N_reject_aaaa	DwMararc.h	65;"	d
DWM_N_reject_mx	DwMararc.h	66;"	d
DWM_N_reject_ptr	DwMararc.h	68;"	d
DWM_N_resurrections	DwMararc.h	53;"	d
DWM_N_tcp_listen	DwMararc.h	58;"	d
DWM_N_timeout_seconds	DwMararc.h	42;"	d
DWM_N_timeout_seconds_tcp	DwMararc.h	57;"	d
DWM_N_truncation_hack	DwMararc.h	67;"	d
DWM_N_ttl_age	DwMararc.h	60;"	d
DWM_N_upstream_port	DwMararc.h	44;"	d
DWM_N_verbose_level	DwMararc.h	55;"	d
DWM_S_bind_address	DwMararc.h	28;"	d
DWM_S_cache_file	DwMararc.h	33;"	d
DWM_S_chroot_dir	DwMararc.h	30;"	d
DWM_S_ip_blacklist	DwMararc.h	34;"	d
DWM_S_ipv4_bind_addresses	DwMararc.h	29;"	d
DWM_S_random_seed_file	DwMararc.h	32;"	d
DWM_S_recursive_acl	DwMararc.h	31;"	d
DWR_BELTCOL	DwRadioGatun.h	34;"	d
DWR_BELTFEED	DwRadioGatun.h	35;"	d
DWR_BELTROWS	DwRadioGatun.h	33;"	d
DWR_MILLSIZE	DwRadioGatun.h	32;"	d
DWR_WORD	DwRadioGatun.h	28;"	d
DWR_WORDSIZE	DwRadioGatun.h	29;"	d
DW_MAXIPS	DwSocket.h	89;"	d
DW_MINTIME	DwSys.h	36;"	d
DW_UID	DwSys.h	35;"	d
EINPROGRESS	DwSocket.h	73;"	d
EXAMPLE_COM_A	DwCompress.c	968;"	d	file:
EXAMPLE_COM_Q	DwCompress.c	966;"	d	file:
EXECFILE_DIR	DwMararc.h	81;"	d
FD_SETSIZE	DwSocket.h	58;"	d
Family	DwSocket.h	135;"	d
GLUE_RANGE	DwRecurse.h	67;"	d
HEADER	RandomPrime.c	24;"	d	file:
HOSTCC	Makefile	/^HOSTCC=$(CC)$/;"	m
INVALID_SOCKET	DwSocket.h	83;"	d
KEY_D_COUNT	DwMararc.h	75;"	d
KEY_N_COUNT	DwMararc.h	77;"	d
KEY_S_COUNT	DwMararc.h	73;"	d
LOG	DwSys.c	/^FILE *LOG = 0;$/;"	v
MARARC_C	DwMararc.c	19;"	d	file:
MSG_DONTWAIT	DwSocket.h	47;"	d
MSG_DONTWAIT	DwSocket.h	78;"	d
MUL_CONSTANT	DwRandPrime.h	3;"	d
NO_INET_PTON	DwSocket.h	70;"	d
OBJS	Makefile	/^OBJS=DwStr.o \\$/;"	m
PA	DwCompress.c	973;"	d	file:
PQ	DwCompress.c	974;"	d	file:
ROOT_SERVERS	DwSocket.h	24;"	d
RRX_AAAA_GLUE_NS	DwRecurse.h	54;"	d
RRX_ANSWER_IN_AR	DwRecurse.h	59;"	d
RRX_A_GLUE_NS	DwRecurse.h	53;"	d
RRX_END_OF_LIST	DwRecurse.h	46;"	d
RRX_FIRST_AAAA_GLUE	DwRecurse.h	63;"	d
RRX_FIRST_A_GLUE	DwRecurse.h	65;"	d
RRX_FULL_GLUE_NS	DwRecurse.h	55;"	d
RRX_GLUELESS_NS	DwRecurse.h	52;"	d
RRX_IGNORE	DwRecurse.h	57;"	d
RRX_INFINITY	DwRecurse.h	47;"	d
RRX_LAST_AAAA_GLUE	DwRecurse.h	64;"	d
RRX_LAST_A_GLUE	DwRecurse.h	66;"	d
RRX_NS_MASK	DwRecurse.h	51;"	d
RRX_OOB_NS	DwRecurse.h	58;"	d
RR_A	DwRecurse.h	38;"	d
RR_AAAA	DwRecurse.h	43;"	d
RR_ANY	DwRecurse.h	44;"	d
RR_CNAME	DwRecurse.h	40;"	d
RR_MX	DwRecurse.h	42;"	d
RR_NS	DwRecurse.h	39;"	d
RR_SOA	DwRecurse.h	41;"	d
SCKT_ERR	DwSocket.h	75;"	d
SCKT_ERR	DwSocket.h	81;"	d
SOCKET	DwSocket.h	82;"	d
TCP_BUFFERSIZE	DwTcpSocket.c	27;"	d	file:
TYPE_ANSWER	DwRecurse.h	70;"	d
TYPE_ANSWER_IN_AR	DwRecurse.h	81;"	d
TYPE_CNAME_REFER	DwRecurse.h	76;"	d
TYPE_DW_HASH	DwRecurse.h	87;"	d
TYPE_DW_STRING	DwRecurse.h	86;"	d
TYPE_ERROR	DwRecurse.h	79;"	d
TYPE_FLOAT128	DwRecurse.h	101;"	d
TYPE_FLOAT16	DwRecurse.h	98;"	d
TYPE_FLOAT32	DwRecurse.h	99;"	d
TYPE_FLOAT64	DwRecurse.h	100;"	d
TYPE_INT128	DwRecurse.h	97;"	d
TYPE_INT16	DwRecurse.h	91;"	d
TYPE_INT32	DwRecurse.h	93;"	d
TYPE_INT64	DwRecurse.h	95;"	d
TYPE_INT8	DwRecurse.h	89;"	d
TYPE_NOT_THERE	DwRecurse.h	72;"	d
TYPE_NO_USEFUL_DATA	DwRecurse.h	78;"	d
TYPE_NS_REFER	DwRecurse.h	75;"	d
TYPE_NXDOMAIN	DwRecurse.h	71;"	d
TYPE_SERVER_TIMEOUT	DwRecurse.h	77;"	d
TYPE_TRUNCATED	DwRecurse.h	73;"	d
TYPE_TRUNCATED_NXDOMAIN	DwRecurse.h	74;"	d
TYPE_UINT128	DwRecurse.h	96;"	d
TYPE_UINT16	DwRecurse.h	90;"	d
TYPE_UINT32	DwRecurse.h	92;"	d
TYPE_UINT64	DwRecurse.h	94;"	d
TYPE_UINT8	DwRecurse.h	88;"	d
TYPE_UPSTREAM_REFER	DwRecurse.h	80;"	d
V4	DwSocket.h	133;"	d
V6	DwSocket.h	134;"	d
VERSION	version.h	1;"	d
__DWDNSSTR_H_DEFINED__	DwDnsStr.h	20;"	d
__DWHASH_H_DEFINED__	DwHash.h	20;"	d
__DWRADIOGATUN_H_DEFINED__	DwRadioGatun.h	20;"	d
__DWRECURSE_H_DEFINED__	DwRecurse.h	20;"	d
__DWSTR_DEFINED__	DwStr.h	20;"	d
__DWSYS_H_DEFINED__	DwSys.h	20;"	d
__DW_SOCKET_DEFINED__	DwSocket.h	20;"	d
__MARARC_H_DEFINED__	DwMararc.h	20;"	d
action	DwMararc.h	/^        char action[DWM_MAX_PATTERNS + 1];$/;"	m	struct:__anon12
action	DwSocket.h	/^        dw_str *action; \/* Used for (cached) incomplete CNAMEs *\/$/;"	m	struct:__anon8
add_constant	DwHash.c	/^uint32_t add_constant = 0x74fc65a2;$/;"	v
alarm_handler	DwHash.c	/^void alarm_handler() {$/;"	f
an	DwDnsStr.h	/^        uint16_t *an; \/* Answers *\/$/;"	m	struct:__anon3
an_types	DwRecurse.h	/^        int8_t *an_types;$/;"	m	struct:__anon13
ancount	DwDnsStr.h	/^        int32_t ancount;$/;"	m	struct:__anon3
ar	DwDnsStr.h	/^        uint16_t *ar; \/* Additional answers *\/$/;"	m	struct:__anon3
ar_types	DwRecurse.h	/^        int8_t *ar_types;$/;"	m	struct:__anon13
arcount	DwDnsStr.h	/^        int32_t arcount;$/;"	m	struct:__anon3
b_local	DwSocket.c	/^SOCKET b_local[DW_MAXIPS + 1];$/;"	v
b_remote	DwSocket.c	/^SOCKET *b_remote;$/;"	v
belt	DwRadioGatun.h	/^        DWR_WORD *belt;$/;"	m	struct:__anon1
bigloop	DwSocket.c	/^int bigloop() {$/;"	f
bind_address	DwSocket.c	/^ip_addr_T bind_address[DW_MAXIPS + 1];$/;"	v
bind_all_tcp	DwTcpSocket.c	/^int bind_all_tcp() {$/;"	f
bind_all_udp	DwUdpSocket.c	/^int bind_all_udp() {$/;"	f
bind_set_dns	DwSocket.c	/^SOCKET bind_set_dns(ip_addr_T *ip, sockaddr_all_T *dns_do, int type) {$/;"	f
blacklist_dict	DwSocket.c	/^dwd_dict *blacklist_dict = 0;$/;"	v
buffer	DwSocket.h	/^        char *buffer;$/;"	m	struct:__anon10
buffer	DwSocket.h	/^        char *buffer;$/;"	m	struct:__anon11
buffer_len	DwSocket.h	/^        ssize_t buffer_len;$/;"	m	struct:__anon10
buffer_socket	DwSocket.h	/^        SOCKET buffer_socket;$/;"	m	struct:__anon10
cache	DwSys.c	/^dw_hash *cache = 0;$/;"	v
cache_dns_reply	DwUdpSocket.c	/^int cache_dns_reply(unsigned char *packet, int count, int b, int truncated) {$/;"	f
cache_size	DwHash.c	/^int32_t cache_size = 0;$/;"	v
check_ip_acl	DwSocket.c	/^int check_ip_acl(ip_addr_T *ip) {$/;"	f
child_id	DwSocket.h	/^        int child_id;$/;"	m	struct:__anon9
closesocket	DwSocket.h	84;"	d
count	DwHash.c	/^uint32_t count = 0;$/;"	v
current_ns	DwSocket.h	/^        int8_t current_ns;$/;"	m	struct:__anon9
dec_a	DwSocket.c	811;"	d	file:
die	DwSocket.h	/^        int64_t die;$/;"	m	struct:__anon10
die	DwSocket.h	/^        int64_t die;$/;"	m	struct:__anon11
die	DwSocket.h	/^        int64_t die;$/;"	m	struct:__anon9
dmain	DwWinSvc.c	/^int dmain(int argc, char **argv) {$/;"	f
dns_details	DwRecurse.h	/^} dns_details;$/;"	t	typeref:struct:__anon13
dns_port	DwSocket.c	/^int dns_port = 53;$/;"	v
dns_string	DwDnsStr.h	/^} dns_string;$/;"	t	typeref:struct:__anon3
do_bind	DwSocket.c	/^SOCKET do_bind(ip_addr_T *ip,int type) {$/;"	f
do_random_bind	DwUdpSocket.c	/^int do_random_bind(SOCKET s, int len) {$/;"	f
do_read_cache	DwSys.c	/^int do_read_cache = 1;$/;"	v
dont_block	DwSocket.c	/^u_long dont_block = 0;$/;"	v
dw_addchar	DwStr.c	/^int dw_addchar(uint8_t add, dw_str *object) {$/;"	f
dw_alog_3strings	DwSys.c	/^void dw_alog_3strings(char *s1, char *s2, char *s3) {$/;"	f
dw_alog_number	DwSys.c	/^void dw_alog_number(char *s1, int number, char *s2) {$/;"	f
dw_append	DwStr.c	/^int dw_append(dw_str *toappend, dw_str *target) {$/;"	f
dw_assert_sanity	DwStr.c	/^int dw_assert_sanity(dw_str *object) {$/;"	f
dw_atoi	DwStr.c	/^int32_t dw_atoi(dw_str *obj, int32_t index, int base) {$/;"	f
dw_bin_append	DwStr.c	/^int dw_bin_append(uint8_t *add, int len, dw_str *object) {$/;"	f
dw_cachepacket_to_ancount	DwStr.c	/^int32_t dw_cachepacket_to_ancount(dw_str *packet) {$/;"	f
dw_copy	DwStr.h	41;"	d
dw_create	DwStr.c	/^dw_str *dw_create(uint32_t size) {$/;"	f
dw_cstr_append	DwStr.c	/^int dw_cstr_append(uint8_t *add, int32_t len, dw_str *obj) {$/;"	f
dw_destroy	DwStr.c	/^int dw_destroy(dw_str *object) {$/;"	f
dw_dnslabel_chop	DwStr.c	/^dw_str *dw_dnslabel_chop(dw_str *in) {$/;"	f
dw_dnsname_convert	DwStr.c	/^dw_str *dw_dnsname_convert(dw_str *in) {$/;"	f
dw_dnsname_delim_convert	DwStr.c	/^int dw_dnsname_delim_convert(dw_str *in, dw_str *out, int a, int place,$/;"	f
dw_element	DwHash.h	/^typedef struct dw_element {$/;"	s
dw_element	DwHash.h	/^} dw_element;$/;"	t	typeref:struct:dw_element
dw_ends_in_dot	DwStr.c	/^int dw_ends_in_dot(dw_str *in) {$/;"	f
dw_fatal	DwSys.c	/^void dw_fatal(char *why) {$/;"	f
dw_fetch_u16	DwStr.c	/^int32_t dw_fetch_u16(dw_str *object, int32_t offset) {$/;"	f
dw_fetch_u8	DwStr.c	/^int32_t dw_fetch_u8(dw_str *object, int32_t offset) {$/;"	f
dw_fila	DwHash.h	/^typedef struct dw_fila {$/;"	s
dw_fila	DwHash.h	/^} dw_fila;$/;"	t	typeref:struct:dw_fila
dw_filename_sanitize	DwStr.c	/^int dw_filename_sanitize(dw_str *obj) {$/;"	f
dw_get_a_dnsttl	DwStr.c	/^int32_t dw_get_a_dnsttl(dw_str *in, int offset, int32_t max, int depth) {$/;"	f
dw_get_bit	DwStr.c	/^int dw_get_bit(dw_str *obj, int32_t byte, int8_t bit) {$/;"	f
dw_get_dn_end	DwStr.c	/^int32_t dw_get_dn_end(dw_str *in, int offset) {$/;"	f
dw_get_dname	DwStr.c	/^dw_str *dw_get_dname(uint8_t *raw, int offset, int max) {$/;"	f
dw_get_dname_type	DwStr.c	/^dw_str *dw_get_dname_type(uint8_t *raw, int offset, int max) {$/;"	f
dw_get_ttl_from_packet	DwStr.c	/^int32_t dw_get_ttl_from_packet(dw_str *in) {$/;"	f
dw_hash	DwHash.h	/^} dw_hash;$/;"	t	typeref:struct:__anon2
dw_issame	DwStr.c	/^int dw_issame(dw_str *a, dw_str *b) {$/;"	f
dw_log_3strings	DwSys.c	/^void dw_log_3strings(char *s1, char *s2, char *s3, int min_log_level) {$/;"	f
dw_log_close	DwSys.c	/^void dw_log_close() {$/;"	f
dw_log_dwstr	DwSys.c	/^void dw_log_dwstr(char *s1, dw_str *s2, int min_log_level) {$/;"	f
dw_log_dwstr_p	DwSys.c	/^void dw_log_dwstr_p(char *s1, dw_str *s2, int min_log_level) {$/;"	f
dw_log_dwstr_str	DwSys.c	/^void dw_log_dwstr_str(char *s1, dw_str *s2, char *s3, int min_log_level) {$/;"	f
dw_log_hex	DwSys.c	/^void dw_log_hex(char *s1, uint32_t number, int min_log_level) {$/;"	f
dw_log_init	DwSys.c	/^void dw_log_init() {$/;"	f
dw_log_ip	DwSys.c	/^void dw_log_ip(char *string, ip_addr_T *ip, int min_log_level) {$/;"	f
dw_log_ip_p	DwSys.c	/^void dw_log_ip_p(ip_addr_T *ip) {$/;"	f
dw_log_number	DwSys.c	/^void dw_log_number(char *s1, int number, char *s2, int min_log_level) {$/;"	f
dw_log_string	DwSys.c	/^void dw_log_string(char *string, int min_log_level) {$/;"	f
dw_malloc	DwStr.h	23;"	d
dw_packet_to_cache	DwStr.c	/^dw_str *dw_packet_to_cache(uint8_t *raw, int len, uint8_t type) {$/;"	f
dw_parse_args	DwMain.c	/^void dw_parse_args(int argc, char **argv) {$/;"	f
dw_pop_u16	DwStr.c	/^int32_t dw_pop_u16(dw_str *object) {$/;"	f
dw_pop_u8	DwStr.c	/^int32_t dw_pop_u8(dw_str *object) {$/;"	f
dw_push_u16	DwStr.h	42;"	d
dw_put_u16	DwStr.c	/^int dw_put_u16(dw_str *obj, uint16_t value, int32_t offset) {$/;"	f
dw_put_u8	DwStr.c	/^int dw_put_u8(dw_str *obj, uint8_t value, int32_t offset) {$/;"	f
dw_px	DwRecurse.h	104;"	d
dw_qrappend	DwStr.c	/^int dw_qrappend(uint8_t *add, dw_str *object, char nope) {$/;"	f
dw_qspop	DwStr.c	/^dw_str *dw_qspop(dw_str *in) {$/;"	f
dw_qspush	DwStr.c	/^int dw_qspush(uint8_t *add, dw_str *object) {$/;"	f
dw_rfind	DwStr.c	/^int32_t dw_rfind(dw_str *obj, uint8_t rx) {$/;"	f
dw_rotate	DwStr.c	/^int dw_rotate(dw_str *in, int32_t start, int32_t pivot, int32_t end) {$/;"	f
dw_show_programname	DwMain.c	/^void dw_show_programname() {$/;"	f
dw_stdout	DwStr.c	/^void dw_stdout(dw_str *object) {$/;"	f
dw_str	DwStr.h	/^        uint8_t *str; } dw_str;$/;"	t	typeref:struct:__anon14
dw_substr	DwStr.c	/^dw_str *dw_substr(dw_str *obj, int32_t begin, int32_t amount, int32_t max) {$/;"	f
dw_substr_append	DwStr.c	/^int dw_substr_append(dw_str *splice, int32_t begin, int32_t amount,$/;"	f
dw_to_cstr	DwStr.c	/^uint8_t *dw_to_cstr(dw_str *obj) {$/;"	f
dw_udp_main	DwMain.c	/^int dw_udp_main(int argc, char **argv) {$/;"	f
dw_win_time	DwSys.c	/^void dw_win_time() {$/;"	f
dw_zap_lws	DwStr.c	/^dw_str *dw_zap_lws(dw_str *obj) {$/;"	f
dwc_check_ip	DwDnsStr.c	/^int dwc_check_ip(dwd_dict *blacklist_hash, dw_str *ip) {$/;"	f
dwc_comp_rddata	DwCompress.c	/^int32_t dwc_comp_rddata(int16_t desc, dw_str *u, int32_t offset, dw_str *c,$/;"	f
dwc_compress	DwCompress.c	/^dw_str *dwc_compress(dw_str *q, dw_str *in) {$/;"	f
dwc_compress_all_rrs	DwCompress.c	/^int dwc_compress_all_rrs(dns_string *unpack, dw_str *in, dw_str *out,$/;"	f
dwc_compress_dlabels	DwCompress.c	/^int32_t dwc_compress_dlabels(dw_str *u, int32_t u_o, dw_str *c,$/;"	f
dwc_compress_rr	DwCompress.c	/^int dwc_compress_rr(uint16_t *o, dw_str *u, dw_str *c, dw_str *q, dw_str *s) {$/;"	f
dwc_convert_dns_str	DwDnsStr.c	/^dw_str *dwc_convert_dns_str(dns_string *in) {$/;"	f
dwc_decomp_dname	DwCompress.c	/^int32_t dwc_decomp_dname(dw_str *in, dw_str *out, dw_str *q, int32_t *delta,$/;"	f
dwc_decomp_offset	DwCompress.c	/^int32_t dwc_decomp_offset(dw_str *in, int32_t offset, int32_t qlen) {$/;"	f
dwc_decomp_rddata	DwCompress.c	/^int32_t dwc_decomp_rddata(int16_t desc, int32_t offset, dw_str *in,$/;"	f
dwc_decomp_rr	DwCompress.c	/^int32_t dwc_decomp_rr(dw_str *in, dw_str *out, dw_str *q, dw_str *stack,$/;"	f
dwc_decompress	DwCompress.c	/^dw_str *dwc_decompress(dw_str *q, dw_str *in) {$/;"	f
dwc_dname_same	DwCompress.c	/^int dwc_dname_same(dw_str *u, int32_t u_o, dw_str *c, int32_t c_o, dw_str *q) {$/;"	f
dwc_finish_name	DwCompress.c	/^int32_t dwc_finish_name(dw_str *out, int32_t *delta, int32_t offset,$/;"	f
dwc_get_type	DwDnsStr.c	/^uint16_t dwc_get_type(dw_str *packet, uint16_t *list, int32_t max,$/;"	f
dwc_has_bad_ip	DwDnsStr.c	/^int dwc_has_bad_ip(dw_str *answer, dwd_dict *blacklist_hash) {$/;"	f
dwc_in_bailiwick	DwCompress.c	/^int32_t dwc_in_bailiwick(dw_str *b, int32_t b_o, dw_str *h,$/;"	f
dwc_init_dns_str	DwDnsStr.c	/^dns_string *dwc_init_dns_str(int32_t ancount, int32_t nscount,$/;"	f
dwc_label_same	DwCompress.c	/^int dwc_label_same(dw_str *a, int32_t a_o, dw_str *b, int32_t b_o) {$/;"	f
dwc_lower_case	DwDnsStr.c	/^int dwc_lower_case(dw_str *query) {$/;"	f
dwc_make_dns_str	DwDnsStr.c	/^dns_string *dwc_make_dns_str(dw_str *in) {$/;"	f
dwc_place_offsets	DwDnsStr.c	/^int32_t dwc_place_offsets(dw_str *in, int32_t offset, int32_t count,$/;"	f
dwc_process	DwDnsStr.c	/^void dwc_process(dw_hash *cache, dw_str *query, uint8_t action) {$/;"	f
dwc_push_offsets	DwCompress.c	/^int dwc_push_offsets(dw_str *dns, int32_t place, dw_str *stack, int32_t$/;"	f
dwc_rotate_offsets	DwDnsStr.c	/^int dwc_rotate_offsets(dw_str *in, int end, int first_rr, int last_rr) {$/;"	f
dwc_rr_find	DwDnsStr.c	/^int dwc_rr_find(dns_string *look) {$/;"	f
dwc_rr_rotate	DwDnsStr.c	/^int dwc_rr_rotate(dw_str *in, int32_t *out_start, int32_t *out_end) {$/;"	f
dwc_seek_comp_pointer	DwCompress.c	/^int32_t dwc_seek_comp_pointer(dw_str *u, int32_t u_o, dw_str *c, dw_str *q,$/;"	f
dwc_ttl_age	DwDnsStr.c	/^int dwc_ttl_age(dw_str *fetch, int32_t ttl) {$/;"	f
dwc_type_desc	DwCompress.c	/^int16_t dwc_type_desc(int32_t type) {$/;"	f
dwc_zap_dns_str	DwDnsStr.c	/^void dwc_zap_dns_str(dns_string *zap) {$/;"	f
dwd_add	DwDict.c	/^dwd_dict *dwd_add(dwd_dict *hash, dw_str *key, dw_str *value) {$/;"	f
dwd_dict	DwDict.h	20;"	d
dwd_fetch	DwDict.c	/^dw_str *dwd_fetch(dwd_dict *hash, dw_str *key) {$/;"	f
dwd_init	DwDict.c	/^dwd_dict *dwd_init() {$/;"	f
dwd_nextkey	DwDict.c	/^dw_str *dwd_nextkey(dwd_dict *hash, dw_str *key) {$/;"	f
dwh_add	DwHash.c	/^int dwh_add(dw_hash *hash, dw_str *key, dw_str *value, int32_t ttl,$/;"	f
dwh_fila_fetch	DwHash.c	/^int dwh_fila_fetch(dw_hash *hash, dw_fila *get) {$/;"	f
dwh_fila_new	DwHash.c	/^int dwh_fila_new(dw_hash *hash, dw_element *val) {$/;"	f
dwh_fila_zap	DwHash.c	/^int dwh_fila_zap(dw_hash *hash, dw_fila *zap, int get_hash) {$/;"	f
dwh_get	DwHash.c	/^dw_str *dwh_get(dw_hash *hash, dw_str *key, int ignore_expire, int use_fila) {$/;"	f
dwh_get_dwstr	DwHash.c	/^dw_str *dwh_get_dwstr(FILE *handle) {$/;"	f
dwh_get_hash_element	DwHash.c	/^dw_element *dwh_get_hash_element(FILE *handle) {$/;"	f
dwh_get_int32	DwHash.c	/^int32_t dwh_get_int32(FILE *handle) {$/;"	f
dwh_get_int64	DwHash.c	/^int64_t dwh_get_int64(FILE *handle) {$/;"	f
dwh_get_ttl	DwHash.c	/^int32_t dwh_get_ttl(dw_hash *hash, dw_str *key) {$/;"	f
dwh_grep	DwHash.c	/^dw_element *dwh_grep(dw_hash *hash, dw_str *key) {$/;"	f
dwh_hash_autogrow	DwHash.c	/^dw_hash *dwh_hash_autogrow(dw_hash *hash) {$/;"	f
dwh_hash_compress	DwHash.c	/^uint32_t dwh_hash_compress(dw_str *obj) {$/;"	f
dwh_hash_init	DwHash.c	/^dw_hash *dwh_hash_init(uint32_t elements) {$/;"	f
dwh_hash_nuke	DwHash.c	/^void dwh_hash_nuke(dw_hash *hash) {$/;"	f
dwh_hash_zap	DwHash.c	/^void dwh_hash_zap(dw_hash *hash) {$/;"	f
dwh_hsck_chains	DwHash.c	/^int dwh_hsck_chains(dw_hash *hash) {$/;"	f
dwh_hsck_fila	DwHash.c	/^int dwh_hsck_fila(dw_hash *hash) {$/;"	f
dwh_hsck_onefila	DwHash.c	/^void dwh_hsck_onefila(int index, dw_fila *seek) {$/;"	f
dwh_init_element	DwHash.c	/^dw_element *dwh_init_element(dw_str *key, dw_str *value, int32_t ttl,$/;"	f
dwh_place_new	DwHash.c	/^int dwh_place_new(dw_hash *hash, dw_element *new, int use_fila) {$/;"	f
dwh_process_mararc_params	DwHash.c	/^void dwh_process_mararc_params() {$/;"	f
dwh_put_dwstr	DwHash.c	/^void dwh_put_dwstr(FILE *handle, dw_str *str) {$/;"	f
dwh_put_hash_element	DwHash.c	/^void dwh_put_hash_element(FILE *handle, dw_element *element) {$/;"	f
dwh_put_int32	DwHash.c	/^void dwh_put_int32(FILE *handle, int32_t num) {$/;"	f
dwh_put_int64	DwHash.c	/^void dwh_put_int64(FILE *handle, int64_t num) {$/;"	f
dwh_read_hash	DwHash.c	/^dw_hash *dwh_read_hash(char *filename) {$/;"	f
dwh_rg32_hash_compress	DwHash.c	/^uint32_t dwh_rg32_hash_compress(dw_str *obj) {$/;"	f
dwh_write_hash	DwHash.c	/^int dwh_write_hash(dw_hash *hash, char *filename) {$/;"	f
dwh_zap	DwHash.c	/^int dwh_zap(dw_hash *hash, dw_str *key, dw_element *seek, int use_fila) {$/;"	f
dwm_char_class	DwMararc.c	/^int dwm_char_class(int32_t in, int cclass) {$/;"	f
dwm_dict_add	DwMararc.c	/^void dwm_dict_add(int num, dw_str *key, dw_str *value, int todo) {$/;"	f
dwm_dict_fetch	DwMararc.c	/^dw_str *dwm_dict_fetch(int num, dw_str *key) {$/;"	f
dwm_dict_init	DwMararc.c	/^void dwm_dict_init() {$/;"	f
dwm_dict_nextkey	DwMararc.c	/^dw_str *dwm_dict_nextkey(int num, dw_str *key) {$/;"	f
dwm_do_action	DwMararc.c	/^void dwm_do_action(int32_t ch, int32_t action, dw_str **actions) {$/;"	f
dwm_execfile	DwMararc.c	/^void dwm_execfile(dw_str *execfile, dw_str *fname) {$/;"	f
dwm_fatal	DwMararc.c	/^void dwm_fatal(char *why) {$/;"	f
dwm_file_depth	DwMararc.c	/^int dwm_file_depth = 0; \/* How many files we're nested in *\/$/;"	v
dwm_fs	DwMararc.h	/^        } dwm_fs;$/;"	t	typeref:struct:__anon12
dwm_grep_params	DwMararc.c	/^int32_t dwm_grep_params(dw_str *seek, char *list[], int max) {$/;"	f
dwm_init_fsm	DwMararc.c	/^void dwm_init_fsm() {$/;"	f
dwm_init_mararc	DwMararc.c	/^void dwm_init_mararc() {$/;"	f
dwm_is_alpha	DwMararc.h	159;"	d
dwm_is_alphanum	DwMararc.h	163;"	d
dwm_is_alphastart	DwMararc.h	168;"	d
dwm_is_any	DwMararc.h	180;"	d
dwm_is_dname	DwMararc.h	171;"	d
dwm_is_dnamestart	DwMararc.h	182;"	d
dwm_is_instring	DwMararc.h	176;"	d
dwm_is_number	DwMararc.h	186;"	d
dwm_is_whitespace	DwMararc.h	178;"	d
dwm_linenum	DwMararc.c	/^int dwm_linenum = 0;$/;"	v
dwm_machine	DwMararc.h	199;"	d
dwm_parse_file	DwMararc.c	/^int dwm_parse_file(char *name) {$/;"	f
dwm_parse_line	DwMararc.c	/^int dwm_parse_line(FILE *look) {$/;"	f
dwm_parse_mararc	DwMararc.c	/^int dwm_parse_mararc(char *name) {$/;"	f
dwm_pattern_process	DwMararc.c	/^char dwm_pattern_process(int b) {$/;"	f
dwm_process_character	DwMararc.c	/^int32_t dwm_process_character(int32_t in, int32_t state) {$/;"	f
dwm_set_action	DwMararc.c	/^char *dwm_set_action(char *c, int max, int d, int32_t state) {$/;"	f
dwm_set_fsm	DwMararc.c	/^char *dwm_set_fsm(int32_t state, char *c, int max) {$/;"	f
dwm_set_keys	DwMararc.c	/^void dwm_set_keys(dw_str **actions) {$/;"	f
dwm_set_newstate	DwMararc.c	/^char *dwm_set_newstate(char *c, int d, int32_t state) {$/;"	f
dwm_set_todo	DwMararc.c	/^int dwm_set_todo(dw_str **actions) {$/;"	f
dwm_tokenize_line	DwMararc.c	/^char *dwm_tokenize_line(char *c) {$/;"	f
dwr_beltmill	DwRadioGatun.c	/^void dwr_beltmill(DWR_WORD *a, DWR_WORD *b) {$/;"	f
dwr_init_rg	DwRadioGatun.c	/^dwr_rg *dwr_init_rg(dw_str *obj) {$/;"	f
dwr_input_map	DwRadioGatun.c	121;"	d	file:
dwr_new	DwRadioGatun.c	/^dwr_rg *dwr_new() {$/;"	f
dwr_rg	DwRadioGatun.h	/^} dwr_rg;$/;"	t	typeref:struct:__anon1
dwr_rng	DwRadioGatun.c	/^uint16_t dwr_rng(dwr_rg *in) {$/;"	f
dwr_zap	DwRadioGatun.c	/^void dwr_zap(dwr_rg *tozap) {$/;"	f
dwx_add_final_answer	DwRecurse.c	/^void dwx_add_final_answer(dw_str *query, dw_str *answer, dw_str *value,$/;"	f
dwx_alt_cname_reply	DwRecurse.c	/^dw_str *dwx_alt_cname_reply(dw_str *query, dw_str *action, dw_str *answer,$/;"	f
dwx_answer_in_ar	DwRecurse.c	/^dw_str *dwx_answer_in_ar(dns_details *view, dw_str *in) {$/;"	f
dwx_cache_reply	DwRecurse.c	/^int dwx_cache_reply(dw_hash *cache, dw_str *query, dw_str *in, int32_t ttl,$/;"	f
dwx_cached_cname_done	DwRecurse.c	/^void dwx_cached_cname_done(dw_str *query, int b, int l, int depth) {$/;"	f
dwx_check_answer_section	DwRecurse.c	/^int dwx_check_answer_section(dw_str *in, dw_str *query, dns_details *view) {$/;"	f
dwx_check_answer_section_any	DwRecurse.c	/^int dwx_check_answer_section_any(dw_str *in, dw_str *query,dns_details *view) {$/;"	f
dwx_check_bailiwick_ns_section	DwRecurse.c	/^int dwx_check_bailiwick_ns_section(dns_details *view, dw_str *query,$/;"	f
dwx_choose_ns	DwRecurse.c	/^int dwx_choose_ns(int b, int count, dwr_rg *rng, dw_str *list) {$/;"	f
dwx_cleanup_ns_ar	DwRecurse.c	/^int dwx_cleanup_ns_ar(dns_details *view) {$/;"	f
dwx_cname_in_cache	DwRecurse.c	/^int dwx_cname_in_cache(dw_str *orig_query, dw_str *query,$/;"	f
dwx_copy_over_section	DwRecurse.c	/^int dwx_copy_over_section(dw_str *out, dw_str *packet, int8_t *types,$/;"	f
dwx_create_cname_reply	DwRecurse.c	/^dw_str *dwx_create_cname_reply(dw_str *query, dw_str *action, dw_str *answer,$/;"	f
dwx_create_dns_details	DwRecurse.c	/^dns_details *dwx_create_dns_details(dw_str *in, dw_str *query) {$/;"	f
dwx_determine_answer_type	DwRecurse.c	/^int dwx_determine_answer_type(dns_details *view, dw_str *query, dw_str *in) {$/;"	f
dwx_dissect_packet	DwRecurse.c	/^dw_str *dwx_dissect_packet(dw_str *in, dw_str *query, dw_str *bailiwick) {$/;"	f
dwx_dname_issame	DwRecurse.c	/^int dwx_dname_issame(uint8_t *p1, uint8_t *p2, uint8_t *pmax1,$/;"	f
dwx_dname_issame_2dw	DwRecurse.c	/^int dwx_dname_issame_2dw(dw_str *in1, uint32_t offset1, dw_str *in2,$/;"	f
dwx_dname_issame_dw	DwRecurse.c	/^int dwx_dname_issame_dw(dw_str *in, uint32_t offset1, uint32_t offset2) {$/;"	f
dwx_do_cname_glueless	DwRecurse.c	/^int dwx_do_cname_glueless(dw_str *query, int conn_num) {$/;"	f
dwx_do_glueless_inflight	DwRecurse.c	/^int dwx_do_glueless_inflight(int32_t conn_number, int already, int type) {$/;"	f
dwx_do_glueless_new	DwRecurse.c	/^void dwx_do_glueless_new(dw_str *query, int32_t conn_number, int type) {$/;"	f
dwx_do_ns_glueless	DwRecurse.c	/^void dwx_do_ns_glueless(ip_addr_T addr, int32_t conn_number) {$/;"	f
dwx_example_org_bailiwick	DwRecurse.c	/^dw_str *dwx_example_org_bailiwick() {$/;"	f
dwx_example_root_bailiwick	DwRecurse.c	/^dw_str *dwx_example_root_bailiwick() {$/;"	f
dwx_find_inflight	DwRecurse.c	/^int dwx_find_inflight(dw_str *query) {$/;"	f
dwx_find_ns_referral	DwRecurse.c	/^dw_str *dwx_find_ns_referral(dns_details *view, int32_t out_len) {$/;"	f
dwx_get_1_dns_rr	DwRecurse.c	/^dw_str *dwx_get_1_dns_rr(dw_str *in, int32_t offset) {$/;"	f
dwx_get_dns_string	DwRecurse.c	/^dw_str *dwx_get_dns_string(dw_str *in, int32_t offset) {$/;"	f
dwx_get_rr_from_answer	DwRecurse.c	/^ip_addr_T dwx_get_rr_from_answer(dw_str *answer) {$/;"	f
dwx_glueless_done	DwRecurse.c	/^void dwx_glueless_done(dw_str *query, int32_t conn_num) {$/;"	f
dwx_handle_cname_refer	DwRecurse.c	/^int dwx_handle_cname_refer(int connection_number, dw_str *action,$/;"	f
dwx_handle_ns_refer	DwRecurse.c	/^void dwx_handle_ns_refer(int connection_number, dw_str *action,$/;"	f
dwx_handle_ns_refer_connect	DwRecurse.c	/^void dwx_handle_ns_refer_connect(int connection_number, dw_str *packet,$/;"	f
dwx_if_an_then_no_ns_nor_ar	DwRecurse.c	/^int dwx_if_an_then_no_ns_nor_ar(dns_details *view) {$/;"	f
dwx_incomplete_cname_done	DwRecurse.c	/^void dwx_incomplete_cname_done(dw_str *query, int child, int l) {$/;"	f
dwx_init_conn_local	DwRecurse.c	/^void dwx_init_conn_local(int32_t conn_number, int local_number) {$/;"	f
dwx_init_dns_details	DwRecurse.c	/^dns_details *dwx_init_dns_details(dns_string *look) {$/;"	f
dwx_link_ns_records	DwRecurse.c	/^int dwx_link_ns_records(dns_details *view) {$/;"	f
dwx_make_cache_string	DwRecurse.c	/^dw_str *dwx_make_cache_string(dns_details *view, int type) {$/;"	f
dwx_make_cname_refer	DwRecurse.c	/^dw_str *dwx_make_cname_refer(dns_details *view) {$/;"	f
dwx_make_cname_reply	DwRecurse.c	/^int dwx_make_cname_reply(int conn_num, dw_str *query,$/;"	f
dwx_make_link	DwRecurse.c	/^void dwx_make_link(dns_details *view, int ns, int ar) {$/;"	f
dwx_make_ns_refer	DwRecurse.c	/^dw_str *dwx_make_ns_refer(dns_details *view) {$/;"	f
dwx_make_ns_refer_glued	DwRecurse.c	/^int dwx_make_ns_refer_glued(dns_details *view, dw_str *out, uint16_t *offset,$/;"	f
dwx_make_ns_refer_proc	DwRecurse.c	/^dw_str *dwx_make_ns_refer_proc(dns_details *view, int32_t out_len) {$/;"	f
dwx_make_nsglue	DwRecurse.c	/^dw_str *dwx_make_nsglue(dw_str *in, int32_t toffset, int type) {$/;"	f
dwx_make_nsglueless	DwRecurse.c	/^dw_str *dwx_make_nsglueless(dw_str *in, int32_t offset) {$/;"	f
dwx_make_one_cname_rr	DwRecurse.c	/^dw_str *dwx_make_one_cname_rr(dw_str *question, int32_t question_offset,$/;"	f
dwx_ns_add_1record	DwRecurse.c	/^int dwx_ns_add_1record(dw_str *out, int ip_type, uint8_t *ip_raw) {$/;"	f
dwx_ns_convert	DwRecurse.c	/^dw_str *dwx_ns_convert(dw_str *in, int is_upstream, dw_str *bailiwick) {$/;"	f
dwx_ns_convert_1ip	DwRecurse.c	/^int dwx_ns_convert_1ip(char *ip_human, uint8_t *ip_raw) {$/;"	f
dwx_ns_convert_init	DwRecurse.c	/^dw_str *dwx_ns_convert_init(dw_str *bailiwick) {$/;"	f
dwx_ns_convert_mangle	DwRecurse.c	/^dw_str *dwx_ns_convert_mangle(dw_str *mangle, int is_upstream, dw_str *b) {$/;"	f
dwx_ns_convert_number	DwRecurse.c	/^int dwx_ns_convert_number(int in) {$/;"	f
dwx_ns_getip	DwRecurse.c	/^ip_addr_T dwx_ns_getip(dw_str *list, dwr_rg *rng, int b) {$/;"	f
dwx_ns_getip_glueless	DwRecurse.c	/^ip_addr_T dwx_ns_getip_glueless(dw_str *list, int offset) {$/;"	f
dwx_ns_getip_ipv4	DwRecurse.c	/^ip_addr_T dwx_ns_getip_ipv4(dw_str *list, int offset) {$/;"	f
dwx_ns_getip_ipv6	DwRecurse.c	/^ip_addr_T dwx_ns_getip_ipv6(dw_str *list, int offset) {$/;"	f
dwx_nsref_type	DwRecurse.c	/^int dwx_nsref_type(int a, int *offset, dw_str *list) {$/;"	f
dwx_remake_complete_reply	DwRecurse.c	/^dw_str *dwx_remake_complete_reply(dns_details *view, int type) {$/;"	f
dwx_remake_footer	DwRecurse.c	/^int dwx_remake_footer(dw_str *out, uint16_t *offsets, uint16_t an,$/;"	f
dwx_rrtype_number	DwRecurse.c	/^int8_t dwx_rrtype_number(int32_t rr) {$/;"	f
dwx_send_glueless_cname_upstream	DwRecurse.c	/^void dwx_send_glueless_cname_upstream(int conn_num, int c, int depth,$/;"	f
dwx_stdout_char	DwRecurse.c	/^void dwx_stdout_char(dw_str *in, int32_t offset) {$/;"	f
dwx_stdout_dns_details	DwRecurse.c	/^void dwx_stdout_dns_details(dns_details *view) {$/;"	f
dwx_stdout_dns_packet	DwRecurse.c	/^void dwx_stdout_dns_packet(dw_str *packet) {$/;"	f
dwx_stdout_rr	DwRecurse.c	/^int32_t dwx_stdout_rr(dw_str *in, int32_t offset) {$/;"	f
dwx_stdout_rrtype	DwRecurse.c	/^void dwx_stdout_rrtype(dw_str *in, int32_t offset) {$/;"	f
dwx_string_bailiwick_query	DwRecurse.c	/^int dwx_string_bailiwick_query(dw_str *in, int32_t offset, dw_str *query) {$/;"	f
dwx_string_bailiwick_top	DwRecurse.c	/^int dwx_string_bailiwick_top(dw_str *in, int32_t offset, dw_str *bailiwick) {$/;"	f
dwx_string_in_bailiwick	DwRecurse.c	/^int dwx_string_in_bailiwick(dw_str *in, int32_t offset, dw_str *bailiwick,$/;"	f
dwx_synth_notthere	DwRecurse.c	/^dw_str *dwx_synth_notthere(dw_str *query) {$/;"	f
dwx_zap_dns_details	DwRecurse.c	/^void dwx_zap_dns_details(dns_details *victim) {$/;"	f
dwx_zap_whitespace	DwRecurse.c	/^void dwx_zap_whitespace(char *in) {$/;"	f
expire	DwHash.h	/^        int64_t expire; \/* When this record expires *\/$/;"	m	struct:dw_element
family	DwSocket.h	/^                sa_family_t family;$/;"	m	union:__anon6::__anon7
fatal	RandomPrime.c	/^void fatal(char *why) {$/;"	f
fila	DwHash.h	/^        dw_fila *fila;  \/* Element in fila for this record *\/$/;"	m	struct:dw_element
fila	DwHash.h	/^        dw_fila *fila;  \/* List used to delete unused elements *\/$/;"	m	struct:__anon2
find_free_remote	DwSocket.c	/^int32_t find_free_remote() {$/;"	f
find_free_tcp_pend	DwTcpSocket.c	/^int32_t find_free_tcp_pend() {$/;"	f
find_inflight_query	DwUdpSocket.c	/^int find_inflight_query(unsigned char *a, int len) {$/;"	f
find_max	DwSocket.c	/^SOCKET find_max(int *list, int max) {$/;"	f
flags	DwSocket.h	/^        uint8_t flags;$/;"	m	struct:__anon4
forward_local_udp_packet	DwUdpSocket.c	/^int forward_local_udp_packet(SOCKET sock, int32_t local_id,$/;"	f
forward_remote_reply	DwUdpSocket.c	/^void forward_remote_reply(unsigned char *packet, size_t len, remote_T *r_ip,$/;"	f
from_socket	DwSocket.h	/^        SOCKET from_socket;$/;"	m	struct:__anon8
fsm	DwMararc.c	/^dwm_fs fsm[DWM_MAX_STATES + 1]; \/* Finite state machine *\/$/;"	v
fsm_desc	DwMararc.c	/^char *fsm_desc=dwm_machine;$/;"	v
ga	DwHash.c	/^int ga = 0;$/;"	v
get_bind_addrs	DwSys.c	/^dw_str *get_bind_addrs() {$/;"	f
get_dns_qid	DwSys.c	/^int32_t get_dns_qid(unsigned char *a, int len, int roy_arends_check) {$/;"	f
get_entropy_from_seedfile	DwSys.c	/^void get_entropy_from_seedfile(uint8_t *noise,int len) {$/;"	f
get_from_ip_port	DwSocket.c	/^uint16_t get_from_ip_port(ip_addr_T *from_ip, sockaddr_all_T *client) {$/;"	f
get_key_n	DwSys.c	/^int32_t get_key_n(int32_t get, int32_t min, int32_t max, int32_t def) {$/;"	f
get_local_udp_packet	DwUdpSocket.c	/^void get_local_udp_packet(SOCKET sock) {$/;"	f
get_max	DwSocket.c	/^SOCKET get_max() {$/;"	f
get_rem_udp_packet_core	DwUdpSocket.c	/^int get_rem_udp_packet_core(unsigned char *a, ssize_t count,$/;"	f
get_remote_udp_packet	DwUdpSocket.c	/^void get_remote_udp_packet(int b, SOCKET sock) {$/;"	f
get_reply_from_cache	DwUdpSocket.c	/^int get_reply_from_cache(dw_str *query, sockaddr_all_T *client,$/;"	f
get_time	DwSys.h	40;"	d
get_upstream_ip	DwSocket.c	/^ip_addr_T get_upstream_ip(dw_str *query, int b) {$/;"	f
get_upstream_ns	DwSocket.c	/^dw_str *get_upstream_ns(dw_str *query, int connection_number) {$/;"	f
glueless	DwSocket.h	/^        dw_str *glueless; \/* Used for glueless NS referrals *\/$/;"	m	struct:__anon4
glueless	DwSocket.h	/^        dw_str *glueless;$/;"	m	struct:__anon9
glueless_conn	DwSocket.h	/^        int glueless_conn; \/* Remote connection number needing glueless *\/$/;"	m	struct:__anon8
glueless_type	DwSocket.h	/^        uint8_t glueless_type;$/;"	m	struct:__anon8
got	DwSocket.h	/^        int32_t got;    \/* Bytes received from TCP connection *\/$/;"	m	struct:__anon11
got_signal	DwSys.c	/^int got_signal = 0;$/;"	v
hServiceStatus	DwWinSvc.c	/^static SERVICE_STATUS_HANDLE    hServiceStatus = 0;$/;"	v	file:
handle_expired	DwSocket.c	/^int handle_expired(int a) {$/;"	f
handle_noreply	DwSocket.c	/^int handle_noreply = 1;$/;"	v
handle_overload	DwSocket.c	/^int handle_overload = 1;$/;"	v
handle_resurrections	DwSocket.c	/^int handle_resurrections(int a) {$/;"	f
handle_signal	DwSys.c	/^void handle_signal(int code) {$/;"	f
hash	DwHash.h	/^        dw_element **hash;$/;"	m	struct:__anon2
immutable	DwHash.h	/^        int8_t immutable; \/* Whether we can delete this element *\/$/;"	m	struct:dw_element
index	DwRadioGatun.h	/^        int32_t index;$/;"	m	struct:__anon1
inet_pton	DwSocket.c	/^int inet_pton(int z, char *c, uint8_t *ip) {$/;"	f
inflight	DwUdpSocket.c	/^dw_hash *inflight;$/;"	v
init_b_remote	DwSocket.c	/^void init_b_remote() {$/;"	f
init_cache	DwSys.c	/^void init_cache() {$/;"	f
init_inflight_hash	DwUdpSocket.c	/^void init_inflight_hash() {$/;"	f
init_rng	DwSys.c	/^void init_rng() {$/;"	f
init_tcp_b_pend	DwTcpSocket.c	/^void init_tcp_b_pend() {$/;"	f
init_tcp_pend	DwSocket.h	195;"	d
init_tcp_rem	DwSocket.h	205;"	d
ip	DwSocket.h	/^        ip_addr_T ip; \/* IP local request came from *\/$/;"	m	struct:__anon8
ip	DwSocket.h	/^        uint8_t ip[17];$/;"	m	struct:__anon4
ip	DwSocket.h	/^        uint8_t ip[17];$/;"	m	struct:__anon5
ip	DwSocket.h	/^        uint8_t ip[5];$/;"	m	struct:__anon4
ip	DwSocket.h	/^        uint8_t ip[5];$/;"	m	struct:__anon5
ip_addr_T	DwSocket.h	/^} ip_addr_T;$/;"	t	typeref:struct:__anon4
ip_mask_T	DwSocket.h	/^} ip_mask_T;$/;"	t	typeref:struct:__anon5
is_upstream	DwSocket.h	/^        uint8_t is_upstream; \/* Whether this is an upstream or root NS *\/$/;"	m	struct:__anon9
isprime	RandomPrime.c	/^int isprime(uint32_t candidate) {$/;"	f
key	DwHash.h	/^        dw_str *key;$/;"	m	struct:dw_element
key_d	DwMararc.h	/^dwd_dict *key_d[KEY_D_COUNT + 1]; \/* The dictionary dwood2rc parameters *\/$/;"	v
key_d_names	DwMararc.h	/^char *key_d_names[KEY_D_COUNT + 1] = {$/;"	v
key_n	DwMararc.h	/^int32_t key_n[KEY_N_COUNT + 1]; \/* The numeric dwood2rc parameters *\/$/;"	v
key_n_names	DwMararc.h	/^char *key_n_names[KEY_N_COUNT + 1] = {$/;"	v
key_s	DwMararc.h	/^dw_str *key_s[KEY_S_COUNT + 1]; \/* All of the string dwood2rc parameters *\/$/;"	v
key_s_names	DwMararc.h	/^char *key_s_names[KEY_S_COUNT + 1] = {$/;"	v
kill_expired	DwSocket.c	/^void kill_expired() {$/;"	f
kill_tcp_expired	DwTcpSocket.c	/^void kill_tcp_expired() {$/;"	f
last	DwHash.h	/^        struct dw_fila *last;$/;"	m	struct:dw_fila	typeref:struct:dw_fila::dw_fila
len	DwSocket.h	/^        uint8_t len; \/* 0: Error; 4: IPv4; 16: IPv6; 127: Glueless name *\/$/;"	m	struct:__anon4
len	DwSocket.h	/^        uint8_t len;$/;"	m	struct:__anon5
len	DwStr.h	/^        uint32_t len; \/* private *\/$/;"	m	struct:__anon14
local	DwSocket.h	/^        SOCKET local;$/;"	m	struct:__anon10
local	DwSocket.h	/^        SOCKET local;$/;"	m	struct:__anon11
local	DwSocket.h	/^        local_T **local; \/* Array of local connections connected to this$/;"	m	struct:__anon9
local_T	DwSocket.h	/^} local_T;$/;"	t	typeref:struct:__anon8
local_id	DwSocket.h	/^        uint16_t local_id; \/* Query ID generated by DNS server connecting$/;"	m	struct:__anon8
local_tcp_accept	DwTcpSocket.c	/^void local_tcp_accept(SOCKET s) {$/;"	f
look	DwRecurse.h	/^        dns_string *look;$/;"	m	struct:__anon13
main	DwCompress.c	/^int main() {$/;"	f
main	DwHash.c	/^int main() {$/;"	f
main	DwMain.c	/^int main(int argc, char **argv) {$/;"	f
main	DwMararc.c	/^int main() {$/;"	f
main	DwRadioGatun.c	/^main(int argc, char **argv) {$/;"	f
main	DwWinSvc.c	/^int main(int argc, char **argv) {$/;"	f
main	RandomPrime.c	/^int main() {$/;"	f
main	Test.c	/^int main() {$/;"	f
make_dns_header	DwUdpSocket.c	/^dw_str *make_dns_header(int32_t id, int16_t flags, int32_t ancount,$/;"	f
make_dns_packet	DwUdpSocket.c	/^dw_str *make_dns_packet(dw_str *question, dw_str *answer, int32_t id) {$/;"	f
make_dns_query_packet	DwTcpSocket.c	/^dw_str *make_dns_query_packet(dw_str *query, int id, int is_upstream) {$/;"	f
make_ip_dict	DwSocket.c	/^dwd_dict *make_ip_dict(dw_str *in) {$/;"	f
make_ip_str	DwSocket.c	/^dw_str *make_ip_str(ip_addr_T *in) {$/;"	f
make_netmask	DwSys.c	/^void make_netmask(int num, uint8_t *str, int len) {$/;"	f
make_new_udp_connect	DwUdpSocket.c	/^void make_new_udp_connect(int b, unsigned char *a, int len, int num_alloc) {$/;"	f
make_remote_connection	DwUdpSocket.c	/^void make_remote_connection(int32_t n, unsigned char *packet, int len,$/;"	f
make_socket_nonblock	DwSocket.h	79;"	d
make_socket_nonblock	DwSocket.h	85;"	d
make_synth_not_there	DwUdpSocket.c	/^void make_synth_not_there(int b, SOCKET sock, unsigned char *a, int count) {$/;"	f
make_synth_not_there_answer	DwUdpSocket.c	/^unsigned char *make_synth_not_there_answer(unsigned char *a, int *count,$/;"	f
malloc_tcp_pend	DwTcpSocket.c	/^void malloc_tcp_pend() {$/;"	f
maradns_gid	DwSocket.c	/^int32_t maradns_gid = 99;$/;"	v
maradns_uid	DwSocket.c	/^int32_t maradns_uid = 99;$/;"	v
mararc_st	DwSys.c	/^struct stat mararc_st;$/;"	v	typeref:struct:stat
mask	DwHash.h	/^        uint32_t mask; \/* "and" mask used to determine size of hash list *\/$/;"	m	struct:__anon2
mask	DwSocket.h	/^        uint8_t mask[17];$/;"	m	struct:__anon5
mask	DwSocket.h	/^        uint8_t mask[5];$/;"	m	struct:__anon5
max	DwHash.h	/^        int32_t max;  \/* Maximum number of elements in hash *\/$/;"	m	struct:__anon2
max	DwStr.h	/^        uint32_t max; \/* private *\/$/;"	m	struct:__anon14
max_tcp_procs	DwSocket.c	/^int max_tcp_procs = 8;$/;"	v
max_ttl	DwSocket.c	/^int32_t max_ttl = 86400;$/;"	v
maxprocs	DwSocket.c	/^int maxprocs = 32;$/;"	v
mill	DwRadioGatun.h	/^        DWR_WORD *mill;$/;"	m	struct:__anon1
min_bind	DwSocket.c	/^int32_t min_bind = 15000;$/;"	v
newstate	DwMararc.h	/^        char newstate[DWM_MAX_PATTERNS + 1];$/;"	m	struct:__anon12
next	DwHash.h	/^        struct dw_element *next;$/;"	m	struct:dw_element	typeref:struct:dw_element::dw_element
next	DwHash.h	/^        struct dw_fila *next;$/;"	m	struct:dw_fila	typeref:struct:dw_fila::dw_fila
noise_to_rng	DwSys.c	/^void noise_to_rng(uint8_t *noise, int len) {$/;"	f
ns	DwDnsStr.h	/^        uint16_t *ns; \/* Name server answers *\/$/;"	m	struct:__anon3
ns	DwSocket.h	/^        dw_str *ns; \/* List of nameservers for this connection *\/$/;"	m	struct:__anon9
ns_types	DwRecurse.h	/^        int8_t *ns_types;$/;"	m	struct:__anon13
nscount	DwDnsStr.h	/^        int32_t nscount;$/;"	m	struct:__anon3
num_1bits	RandomPrime.c	/^int num_1bits(uint32_t candidate) {$/;"	f
num_locals	DwSocket.h	/^        uint16_t num_locals; \/* Number of local connections to send replies$/;"	m	struct:__anon9
num_ports	DwSocket.c	/^int32_t num_ports = 4096;$/;"	v
num_retries	DwSocket.c	/^int num_retries = 5;$/;"	v
orig_query	DwSocket.h	/^        dw_str *orig_query; \/* Case-preserved form of query *\/$/;"	m	struct:__anon8
packet	DwDnsStr.h	/^        dw_str *packet;$/;"	m	struct:__anon3
pattern	DwMararc.h	/^        char pattern[DWM_MAX_PATTERNS + 1];$/;"	m	struct:__anon12
pop_ip	DwSocket.c	/^void pop_ip(dw_str *list, ip_addr_T *ip) {$/;"	f
pop_ip_core	DwSocket.c	/^void pop_ip_core(dw_str *list, ip_addr_T *ip,char *c) {$/;"	f
pop_ip_mask	DwSocket.c	/^void pop_ip_mask(dw_str *list, ip_mask_T *ip_mask) {$/;"	f
pop_last_item	DwSys.c	/^char *pop_last_item(dw_str *list) {$/;"	f
port	DwSocket.h	/^        uint16_t port; \/* Port local request came from *\/$/;"	m	struct:__anon8
prev	DwHash.h	/^        struct dw_element **prev; \/* A pointer to the pointer to this element,$/;"	m	struct:dw_element	typeref:struct:dw_element::dw_element
process_mararc	DwSys.c	/^void process_mararc(char *name) {$/;"	f
process_mararc_params	DwSocket.c	/^void process_mararc_params() {$/;"	f
process_numeric_mararc_params	DwSocket.c	/^void process_numeric_mararc_params() {$/;"	f
process_results	DwSocket.c	/^void process_results(int a, fd_set *rx_fd) {$/;"	f
process_root_upstream	DwSocket.c	/^void process_root_upstream() {$/;"	f
process_root_upstream_servers	DwSocket.c	/^int process_root_upstream_servers(int param, int is_upstream, char *bad) {$/;"	f
process_signal	DwSys.c	/^void process_signal(int number) {$/;"	f
query	DwSocket.h	/^        dw_str *query;$/;"	m	struct:__anon9
record	DwHash.h	/^        struct dw_element *record;$/;"	m	struct:dw_fila	typeref:struct:dw_fila::dw_element
recurse_depth	DwSocket.h	/^        uint8_t recurse_depth;$/;"	m	struct:__anon9
recursive_acl	DwSocket.c	/^ip_mask_T recursive_acl[DW_MAXIPS + 1];$/;"	v
rem	DwSocket.c	/^remote_T *rem;$/;"	v
remote	DwSocket.h	/^        SOCKET remote;$/;"	m	struct:__anon10
remote_T	DwSocket.h	/^} remote_T;$/;"	t	typeref:struct:__anon9
remote_id	DwSocket.h	/^        uint16_t remote_id; \/* Query ID generated by Deadwood *\/$/;"	m	struct:__anon9
reset_rem	DwSocket.c	/^void reset_rem(int_fast32_t a) {$/;"	f
reset_tcp_pend	DwSocket.h	213;"	d
reset_tcp_rem	DwSocket.h	225;"	d
resurrections	DwSocket.c	/^int resurrections = 1;$/;"	v
retries	DwSocket.h	/^        int retries; \/* Number of times to retry connection *\/$/;"	m	struct:__anon9
rng_seed	DwSys.c	/^dwr_rg *rng_seed;$/;"	v
run_loop	DwWinSvc.c	/^int run_loop = 1;$/;"	v
sStatus	DwWinSvc.c	/^static SERVICE_STATUS           sStatus;$/;"	v	file:
sa_family_t	DwSocket.h	71;"	d
sandbox	DwSys.c	/^void sandbox() {$/;"	f
sane	DwStr.h	/^        uint8_t sane; \/* private *\/$/;"	m	struct:__anon14
send_reply_from_cache	DwUdpSocket.c	/^int send_reply_from_cache(unsigned char *a, ssize_t count, int b, int l) {$/;"	f
send_server_fail	DwUdpSocket.c	/^void send_server_fail(sockaddr_all_T *client,unsigned char *a, int len,$/;"	f
sent	DwSocket.h	/^        int32_t sent;   \/* Bytes sent downstream from TCP connection *\/$/;"	m	struct:__anon11
server_fail_noreply	DwUdpSocket.c	/^void server_fail_noreply(int a, int local_num) {$/;"	f
set_add_constant	DwHash.c	/^void set_add_constant() {$/;"	f
set_dns_qid	DwSys.c	/^int32_t set_dns_qid(unsigned char *packet, int len, uint16_t qid) {$/;"	f
set_ip_list	DwSocket.c	/^void set_ip_list(ip_addr_T *list, dw_str *str) {$/;"	f
set_ipmask_list	DwSocket.c	/^void set_ipmask_list(ip_mask_T *list, dw_str *str) {$/;"	f
set_rx_fd	DwSocket.c	/^void set_rx_fd(fd_set *rx_fd) {$/;"	f
set_time	DwSys.c	/^void set_time() {$/;"	f
setup_bind	DwUdpSocket.c	/^void setup_bind(sockaddr_all_T *dns_udp, uint16_t port, int len) {$/;"	f
setup_server	DwUdpSocket.c	/^SOCKET setup_server(sockaddr_all_T *server, ip_addr_T *addr) {$/;"	f
setup_signals	DwSys.c	/^void setup_signals() {$/;"	f
setup_tcp_server	DwTcpSocket.c	/^SOCKET setup_tcp_server(sockaddr_all_T *server, dw_str *query, int b) {$/;"	f
show_fsm	DwMararc.c	/^void show_fsm() {$/;"	f
show_str	DwCompress.c	/^void show_str(dw_str *u) {$/;"	f
size	DwHash.h	/^        int32_t size; \/* Number of elements in hash *\/$/;"	m	struct:__anon2
sockaddr_all_T	DwSocket.h	/^} sockaddr_all_T;$/;"	t	typeref:struct:__anon6
socket	DwSocket.h	/^        SOCKET socket; \/* Socket for connection upstream *\/$/;"	m	struct:__anon9
socklen_t	DwSocket.h	72;"	d
state	DwSocket.h	/^        int state;      \/* What is the connection doing right now? *\/$/;"	m	struct:__anon11
str	DwStr.h	/^        uint8_t *str; } dw_str;$/;"	m	struct:__anon14
svc_install_service	DwWinSvc.c	/^void svc_install_service() {$/;"	f
svc_remove_service	DwWinSvc.c	/^void svc_remove_service() {$/;"	f
svc_service_control	DwWinSvc.c	/^void svc_service_control(DWORD dwControl) {$/;"	f
svc_service_main	DwWinSvc.c	/^void svc_service_main(int argc, char **argv) {$/;"	f
tcp_b_local	DwTcpSocket.c	/^SOCKET tcp_b_local[DW_MAXIPS + 1]; \/* Local sockets *\/$/;"	v
tcp_downstream_forward	DwTcpSocket.c	/^void tcp_downstream_forward(int b) {$/;"	f
tcp_get_upstream_len	DwTcpSocket.c	/^void tcp_get_upstream_len(int b) {$/;"	f
tcp_get_wanted	DwTcpSocket.c	/^void tcp_get_wanted(int b) {$/;"	f
tcp_handle_all	DwTcpSocket.c	/^void tcp_handle_all(int b) {$/;"	f
tcp_num	DwSocket.h	/^        int tcp_num; \/* If this is a UDP connection, this has a value of$/;"	m	struct:__anon8
tcp_pend	DwTcpSocket.c	/^tcp_pend_T *tcp_pend;$/;"	v
tcp_pend_T	DwSocket.h	/^} tcp_pend_T;$/;"	t	typeref:struct:__anon11
tcp_prepare_upstream_len	DwTcpSocket.c	/^void tcp_prepare_upstream_len(int b) {$/;"	f
tcp_process_data	DwTcpSocket.c	/^void tcp_process_data(int b) {$/;"	f
tcp_process_results	DwTcpSocket.c	/^void tcp_process_results(int a, fd_set *rx_fd) {$/;"	f
tcp_remote2local	DwSocket.h	237;"	d
tcp_remote_T	DwSocket.h	/^} tcp_remote_T;$/;"	t	typeref:struct:__anon10
tcp_return_reply	DwTcpSocket.c	/^void tcp_return_reply(int b, char *packet, int len) {$/;"	f
tcp_send_wanted	DwTcpSocket.c	/^void tcp_send_wanted(int b) {$/;"	f
tcp_to_udp	DwTcpSocket.c	/^void tcp_to_udp(int b) {$/;"	f
tcp_truncated_retry	DwTcpSocket.c	/^void tcp_truncated_retry(int b, dw_str *query, int id, int udp_id, int is_up) {$/;"	f
tcp_upstream_send	DwTcpSocket.c	/^void tcp_upstream_send(int b) {$/;"	f
the_time	DwSys.c	/^int64_t the_time = 0;$/;"	v
timeout_seconds	DwSocket.c	/^int timeout_seconds = 1;$/;"	v
timeout_seconds	DwSocket.c	/^int timeout_seconds = 2;$/;"	v
timeout_seconds_tcp	DwSocket.c	/^int timeout_seconds_tcp = 4;$/;"	v
try_forward_local_udp_packet	DwUdpSocket.c	/^void try_forward_local_udp_packet(SOCKET sock, int32_t local_id,$/;"	f
type	DwDnsStr.h	/^        uint8_t type;$/;"	m	struct:__anon3
u	DwSocket.h	/^        } u;$/;"	m	struct:__anon6	typeref:union:__anon6::__anon7
upstream	DwSocket.h	/^        SOCKET upstream; \/* For TCP queries after getting truncated packets *\/$/;"	m	struct:__anon11
upstream_address	DwSocket.c	/^ip_addr_T upstream_address[DW_MAXIPS + 1];$/;"	v
upstream_port	DwSocket.c	/^int upstream_port = 53;$/;"	v
usage	DwMain.c	/^void usage() {$/;"	f
v4	DwSocket.h	/^                struct sockaddr_in v4;$/;"	m	union:__anon6::__anon7	typeref:struct:__anon6::__anon7::sockaddr_in
v6	DwSocket.h	/^                struct sockaddr_in6 v6;$/;"	m	union:__anon6::__anon7	typeref:struct:__anon6::__anon7::sockaddr_in6
value	DwHash.h	/^        dw_str *value;$/;"	m	struct:dw_element
verify_dns_packet	DwUdpSocket.c	/^int verify_dns_packet(int b, unsigned char *packet, int len) {$/;"	f
wanted	DwSocket.h	/^        int32_t wanted; \/* Bytes wanted from TCP connection *\/$/;"	m	struct:__anon11
windows_socket_start	DwMain.c	/^void windows_socket_start() {$/;"	f
zap_inflight	DwUdpSocket.c	/^void zap_inflight(dw_str *query) {$/;"	f
